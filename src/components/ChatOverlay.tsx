import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { ChatCircle, PaperPlaneRight, X, Robot, User as UserIcon } from '@phosphor-icons/react';
import { Language, ChatMessage } from '@/types';
import { useTranslation } from '@/lib/translations';
import { useKV } from '@github/spark/hooks';
import { useAuth } from '@/hooks/use-auth';

interface ChatOverlayProps {
  isOpen: boolean;
  onClose: () => void;
  language: Language;
}

export function ChatOverlay({ isOpen, onClose, language }: ChatOverlayProps) {
  const [messages, setMessages] = useKV<ChatMessage[]>('kolam-chat-history', []);
  const [currentMessage, setCurrentMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { user } = useAuth();
  const t = useTranslation(language);

  // GitHub Spark API integration for mentor responses
  const getAIResponse = async (userMessage: string): Promise<string> => {
    try {
      const response = await fetch('/api/mentor', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          message: userMessage,
          language: language
        }),
      });

      if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
      }

      const data = await response.json();
      return data.message || "I apologize, but I'm having trouble responding right now. Please try again.";
    } catch (error) {
      console.error('Error calling mentor API:', error);
      
      // Fallback response in case API fails
      const fallbackResponses: Record<Language, string> = {
        en: "I'm experiencing a connection issue. Let me share this: Kolam art is a beautiful blend of mathematics and spirituality, where every pattern reflects cosmic harmony.",
        ta: "‡Æá‡Æ£‡Øà‡Æ™‡Øç‡Æ™‡ØÅ ‡Æö‡Æø‡Æï‡Øç‡Æï‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ. ‡Æá‡Æ§‡Øà‡Æ™‡Øç ‡Æ™‡Æï‡Æø‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç: ‡Æï‡Øã‡Æ≤‡ÆÆ‡Øç ‡Æï‡Æ≤‡Øà ‡Æï‡Æ£‡Æø‡Æ§‡ÆÆ‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÜ‡Æ©‡Øç‡ÆÆ‡ØÄ‡Æï‡Æ§‡Øç‡Æ§‡Æø‡Æ©‡Øç ‡ÆÖ‡Æ¥‡Æï‡Ææ‡Æ© ‡Æï‡Æ≤‡Æµ‡Øà‡ÆØ‡Ææ‡Æï‡ØÅ‡ÆÆ‡Øç.",
        hi: "‡§Æ‡•Å‡§ù‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§Ø‡§π ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Ç: ‡§ï‡•ã‡§≤‡§Æ ‡§ï‡§≤‡§æ ‡§ó‡§£‡§ø‡§§ ‡§î‡§∞ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ ‡§ï‡§æ ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§Æ‡§ø‡§∂‡•ç‡§∞‡§£ ‡§π‡•à‡•§",
        fr: "J'ai un probl√®me de connexion. Permettez-moi de partager ceci : l'art kolam est un beau m√©lange de math√©matiques et de spiritualit√©."
      };
      
      return fallbackResponses[language];
    }
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Add welcome message if chat is empty
  useEffect(() => {
    if (isOpen && (!messages || messages.length === 0)) {
      const welcomeMessage: ChatMessage = {
        id: `msg_${Date.now()}`,
        content: language === 'en' ? 
          "üôè Welcome! I'm your Kolam AI mentor. Ask me about sacred geometry, traditional patterns, drawing techniques, or the cultural significance of kolam art." :
          language === 'ta' ?
          "üôè ‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç! ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Øã‡Æ≤‡ÆÆ‡Øç AI ‡Æï‡ØÅ‡Æ∞‡ØÅ. ‡Æ™‡ØÅ‡Æ©‡Æø‡Æ§ ‡Æµ‡Æü‡Æø‡Æµ‡Æµ‡Æø‡ÆØ‡Æ≤‡Øç, ‡Æ™‡Ææ‡Æ∞‡ÆÆ‡Øç‡Æ™‡Æ∞‡Æø‡ÆØ ‡Æµ‡Æü‡Æø‡Æµ‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡Æµ‡Æ∞‡Øà‡Æ™‡Æü ‡Æ®‡ØÅ‡Æü‡Øç‡Æ™‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æï‡Øã‡Æ≤‡ÆÆ‡Øç ‡Æï‡Æ≤‡Øà‡ÆØ‡Æø‡Æ©‡Øç ‡Æï‡Æ≤‡Ææ‡Æö‡Øç‡Æö‡Ææ‡Æ∞ ‡ÆÆ‡ØÅ‡Æï‡Øç‡Æï‡Æø‡ÆØ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡ÆÆ‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç." :
          language === 'hi' ?
          "üôè ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§ï‡•ã‡§≤‡§Æ AI ‡§ó‡•Å‡§∞‡•Å ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§™‡§µ‡§ø‡§§‡•ç‡§∞ ‡§ú‡•ç‡§Ø‡§æ‡§Æ‡§ø‡§§‡§ø, ‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§™‡•à‡§ü‡§∞‡•ç‡§®, ‡§ö‡§ø‡§§‡•ç‡§∞‡§ï‡§≤‡§æ ‡§§‡§ï‡§®‡•Ä‡§ï, ‡§Ø‡§æ ‡§ï‡•ã‡§≤‡§Æ ‡§ï‡§≤‡§æ ‡§ï‡•á ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§" :
          "üôè Bonjour ! Je suis votre mentor IA Kolam. Demandez-moi des informations sur la g√©om√©trie sacr√©e, les motifs traditionnels, les techniques de dessin ou la signification culturelle de l'art kolam.",
        sender: 'mentor',
        timestamp: new Date().toISOString(),
        language
      };
      
      setMessages([welcomeMessage]);
    }
  }, [isOpen, language]);

  const handleSendMessage = async () => {
    if (!currentMessage.trim()) return;

    const userMessage: ChatMessage = {
      id: `msg_${Date.now()}_user`,
      content: currentMessage,
      sender: 'user',
      timestamp: new Date().toISOString(),
      language
    };

    setMessages(prev => [...(prev || []), userMessage]);
    setCurrentMessage('');
    setIsLoading(true);

    try {
      const aiResponse = await getAIResponse(currentMessage);
      
      const mentorMessage: ChatMessage = {
        id: `msg_${Date.now()}_mentor`,
        content: aiResponse,
        sender: 'mentor',
        timestamp: new Date().toISOString(),
        language
      };

      setMessages(prev => [...(prev || []), mentorMessage]);
    } catch (error) {
      console.error('Error getting AI response:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 bg-background/80 backdrop-blur-sm flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl h-[600px] bg-card/95 backdrop-blur-sm glow-accent">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-4">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-accent/20 rounded-full flex items-center justify-center">
              <Robot size={20} className="text-accent" />
            </div>
            <div>
              <CardTitle className="text-lg">
                {language === 'en' && 'Kolam AI Mentor'}
                {language === 'ta' && '‡Æï‡Øã‡Æ≤‡ÆÆ‡Øç AI ‡Æï‡ØÅ‡Æ∞‡ØÅ'}
                {language === 'hi' && '‡§ï‡•ã‡§≤‡§Æ AI ‡§ó‡•Å‡§∞‡•Å'}
                {language === 'fr' && 'Mentor IA Kolam'}
              </CardTitle>
              <p className="text-sm text-muted-foreground">
                {language === 'en' && 'Your cultural guide and drawing assistant'}
                {language === 'ta' && '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Æ≤‡Ææ‡Æö‡Øç‡Æö‡Ææ‡Æ∞ ‡Æµ‡Æ¥‡Æø‡Æï‡Ææ‡Æü‡Øç‡Æü‡Æø ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æ∞‡Øà‡Æ™‡Æü ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç'}
                {language === 'hi' && '‡§Ü‡§™‡§ï‡§æ ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§ó‡§æ‡§á‡§° ‡§î‡§∞ ‡§°‡•ç‡§∞‡•â‡§á‡§Ç‡§ó ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü'}
                {language === 'fr' && 'Votre guide culturel et assistant de dessin'}
              </p>
            </div>
          </div>
          <Button variant="ghost" size="sm" onClick={onClose}>
            <X size={16} />
          </Button>
        </CardHeader>

        <CardContent className="flex flex-col h-[500px]">
          {/* Messages */}
          <ScrollArea className="flex-1 pr-4 mb-4">
            <div className="space-y-4">
              {(messages || []).map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div className={`flex items-start space-x-2 max-w-[80%] ${message.sender === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                      message.sender === 'user' 
                        ? 'bg-primary/20' 
                        : 'bg-accent/20'
                    }`}>
                      {message.sender === 'user' ? (
                        <UserIcon size={16} className="text-primary" />
                      ) : (
                        <Robot size={16} className="text-accent" />
                      )}
                    </div>
                    <div className={`rounded-lg px-3 py-2 ${
                      message.sender === 'user'
                        ? 'bg-primary text-primary-foreground'
                        : 'bg-muted text-muted-foreground'
                    }`}>
                      <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                      <p className="text-xs opacity-70 mt-1">
                        {new Date(message.timestamp).toLocaleTimeString([], { 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        })}
                      </p>
                    </div>
                  </div>
                </div>
              ))}
              
              {isLoading && (
                <div className="flex justify-start">
                  <div className="flex items-start space-x-2 max-w-[80%]">
                    <div className="w-8 h-8 rounded-full flex items-center justify-center bg-accent/20">
                      <Robot size={16} className="text-accent" />
                    </div>
                    <div className="bg-muted rounded-lg px-3 py-2">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-current rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>
          </ScrollArea>

          {/* Input */}
          <div className="flex space-x-2">
            <Input
              value={currentMessage}
              onChange={(e) => setCurrentMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={
                language === 'en' ? 'Ask about kolam patterns, symmetry, or cultural meaning...' :
                language === 'ta' ? '‡Æï‡Øã‡Æ≤‡ÆÆ‡Øç ‡Æµ‡Æü‡Æø‡Æµ‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡Æö‡ÆÆ‡Æö‡Øç‡Æö‡ØÄ‡Æ∞‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æï‡Æ≤‡Ææ‡Æö‡Øç‡Æö‡Ææ‡Æ∞ ‡ÆÖ‡Æ∞‡Øç‡Æ§‡Øç‡Æ§‡Æ§‡Øç‡Æ§‡Øà‡Æ™‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç...' :
                language === 'hi' ? '‡§ï‡•ã‡§≤‡§Æ ‡§™‡•à‡§ü‡§∞‡•ç‡§®, ‡§∏‡§Æ‡§∞‡•Ç‡§™‡§§‡§æ, ‡§Ø‡§æ ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§Ö‡§∞‡•ç‡§• ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç...' :
                'Demandez des informations sur les motifs kolam, la sym√©trie ou la signification culturelle...'
              }
              disabled={isLoading}
              className="flex-1"
            />
            <Button 
              onClick={handleSendMessage} 
              disabled={!currentMessage.trim() || isLoading}
              className="glow-primary"
            >
              <PaperPlaneRight size={16} />
            </Button>
          </div>

          {/* Quick Questions */}
          <div className="mt-3 flex flex-wrap gap-2">
            {[
              language === 'en' ? 'What is kolam?' : 
              language === 'ta' ? '‡Æï‡Øã‡Æ≤‡ÆÆ‡Øç ‡Æé‡Æ©‡Øç‡Æ±‡Ææ‡Æ≤‡Øç ‡Æé‡Æ©‡Øç‡Æ©?' :
              language === 'hi' ? '‡§ï‡•ã‡§≤‡§Æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?' : 
              'Qu\'est-ce que le kolam ?',
              
              language === 'en' ? 'Explain symmetry' : 
              language === 'ta' ? '‡Æö‡ÆÆ‡Æö‡Øç‡Æö‡ØÄ‡Æ∞‡Øà ‡Æµ‡Æø‡Æ≥‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç' :
              language === 'hi' ? '‡§∏‡§Æ‡§∞‡•Ç‡§™‡§§‡§æ ‡§∏‡§Æ‡§ù‡§æ‡§è‡§Ç' : 
              'Expliquer la sym√©trie',
              
              language === 'en' ? 'Color meanings' : 
              language === 'ta' ? '‡Æ®‡Æø‡Æ± ‡ÆÖ‡Æ∞‡Øç‡Æ§‡Øç‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡Øç' :
              language === 'hi' ? '‡§∞‡§Ç‡§ó ‡§ï‡•á ‡§Ö‡§∞‡•ç‡§•' : 
              'Signification des couleurs'
            ].map((question) => (
              <Button
                key={question}
                variant="outline"
                size="sm"
                onClick={() => setCurrentMessage(question)}
                className="text-xs"
                disabled={isLoading}
              >
                {question}
              </Button>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}